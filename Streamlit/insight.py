import logging
from opencensus.ext.azure.log_exporter import AzureLogHandler
from azure.monitor.opentelemetry import configure_azure_monitor
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()
INSTRUMENTATION_KEY = os.getenv("APPLICATION_INSIGHTS_CONNECTION_STRING")

if not INSTRUMENTATION_KEY:
    print("‚ùó Erreur : Cl√© d'instrumentation non trouv√©e.")
else:
    print("‚úÖ Cl√© d'instrumentation d√©tect√©e.")

# Configurer les logs g√©n√©raux
logging.basicConfig(level=logging.INFO)

# Configurer Application Insights
try:
    # Utilisez configure_azure_monitor pour g√©rer les logs
    configure_azure_monitor(
        connection_string=INSTRUMENTATION_KEY,
        logger_name="insight-ocr-p7"
    )
    print("‚úÖ Azure Monitor configur√© avec succ√®s.")
except Exception as e:
    print(f"‚ùó Erreur lors de la configuration d'Azure Monitor : {e}")

# Configurer le logger
logger = logging.getLogger("insight-ocr-p7")
logger.setLevel(logging.INFO)

# V√©rifier si des handlers existent
if not logger.handlers:
    try:
        azure_handler = AzureLogHandler(connection_string=INSTRUMENTATION_KEY)
        azure_handler.setLevel(logging.INFO)
        logger.addHandler(azure_handler)
        print("‚úÖ AzureLogHandler ajout√© avec succ√®s.")
    except Exception as e:
        print(f"‚ùó Erreur lors de l'ajout du AzureLogHandler: {e}")

# Gestion des feedbacks
def log_feedback(feedback, tweet):
    print(f"log_feedback appel√©")
    if feedback == "negative":
        logger.warning(f"Feedback n√©gatif re√ßu: {tweet}")
    else:
        logger.info(f"Feedback positif re√ßu: {tweet}")

# def send_alert_email():
#     logger.info("üìß Envoi d'un email d'alerte (simulation).")
#     # Simuler un envoi d'email via un service d'emailing comme SendGrid ou SMTP